@page "/Login"
@namespace LoginComponent
@using Assignment3.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
<AuthorizeView>
    <NotAuthorized>
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <div style="color:red">@errorMessage</div>

        <a href="" @onclick="PerformLogin">
            Login
        </a>
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">
            Log out
        </a>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        //try
        //{
        //    User user = await _UserService.ValidateUserAsync(username, password);
        //    if (user == null)
        //        errorMessage = "User not found";
        //    else
        //    {

        //    }
        //}

        //catch (Exception e)
        //{
        //    errorMessage = e.Message;
        //}
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLoginAsync(username, password);
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }
}